<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!-- 0.035 0.0325  -->
  <xacro:property name="wheel_radius" value="0.034" />
  <xacro:property name="wheel_width" value="0.025" />

  <!-- TODO Maybe scale speeds and torque back to mimic real limitations better -->

  <!-- 160 RPM @ 6V (https://wiki.dfrobot.com/Micro_DC_Motor_with_Encoder-SJ01_SKU__FIT0450) -->
  <xacro:property name="max_rotational_velocity_wheel" value="${(160/60)*pi*2}" />
  <xacro:property name="wheel_separation" value="${0.158-wheel_width}" />

  <!-- 0.8kgf.cm Max Stall torque
  (https://wiki.dfrobot.com/Micro_DC_Motor_with_Encoder-SJ01_SKU__FIT0450) -->
  <xacro:property name="max_wheel_torque" value="0.0784532" />

  <material name="wheel_material">
    <!-- <color rgba="0.79216 0.81961 0.93333 1" /> -->
    <color rgba="${235/255} ${216/255} ${52/255} 1" />
  </material>

  <link name="left_wheel">
    <inertial>
      <origin xyz="-1.8593E-08 -1.3155E-09 -0.011873" />
      <mass value="0.16695" />
      <inertia
        ixx="6.7296E-05"
        ixy="5.9539E-12"
        ixz="3.2303E-12"
        iyy="6.7293E-05"
        iyz="2.4005E-13"
        izz="0.00011321" />
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://brum_description/meshes/left_wheel.STL" />
      </geometry>
      <material name="wheel_material" />
    </visual>
    <collision>
      <origin xyz="0.0 0.0 -${wheel_width/2}" />
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}" />
      </geometry>
    </collision>
  </link>
  <link
    name="right_wheel">
    <inertial>
      <origin xyz="-1.8593E-08 -1.3155E-09 -0.011873" />
      <mass value="0.16695" />
      <inertia
        ixx="6.7296E-05"
        ixy="5.9539E-12"
        ixz="3.2304E-12"
        iyy="6.7293E-05"
        iyz="2.4005E-13"
        izz="0.00011321" />
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://brum_description/meshes/right_wheel.STL" />
      </geometry>
      <material name="wheel_material" />
    </visual>
    <collision>
      <origin xyz="0.0 0.0 ${-wheel_width/2}" />
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}" />
      </geometry>
    </collision>
  </link>

  <joint name="left_wheel_joint" type="continuous">
    <origin
      xyz="0 0.07925 -0.01815"
      rpy="-1.5708 0 0" />
    <parent link="frame_link" />
    <child link="left_wheel" />
    <axis xyz="0 0 1" />

    <limit effort="${max_wheel_torque}" velocity="${max_rotational_velocity_wheel}" />
  </joint>
  <joint name="right_wheel_joint" type="continuous">
    <origin
      xyz="0 -0.07925 -0.01815"
      rpy="1.5708 0 0" />
    <parent link="frame_link" />
    <child link="right_wheel" />
    <axis xyz="0 0 -1" />

    <limit effort="${max_wheel_torque}" velocity="${max_rotational_velocity_wheel}" />
  </joint>

  <xacro:if value="${mode == 'real'}">
    <xacro:include filename="$(find mirte_modular_hardware)/urdf/motor.ros2_control.xacro" />
    <xacro:include filename="$(find mirte_modular_hardware)/urdf/encoder.ros2_control.xacro" />

    <xacro:mirte_modular_hardware_motor hw_device_name="left" joint_name="left_wheel_joint" max_motor_speed="${max_rotational_velocity_wheel}" />
    <xacro:mirte_modular_hardware_motor hw_device_name="right" joint_name="right_wheel_joint" max_motor_speed="${max_rotational_velocity_wheel}" />

    <xacro:mirte_modular_hardware_encoder hw_device_name="left" joint_name="left_wheel_joint" ticks_per_rotation="960" />
    <xacro:mirte_modular_hardware_encoder hw_device_name="right" joint_name="right_wheel_joint" ticks_per_rotation="960" />
  </xacro:if>

  <xacro:if value="${mode == 'gz-sim-diff-drive-plugin'}">
    <gazebo>
      <plugin filename="gz-sim-diff-drive-system" name="gz::sim::systems::DiffDrive">
        <left_joint>left_wheel_joint</left_joint>
        <right_joint>right_wheel_joint</right_joint>
        <wheel_separation>${wheel_separation}</wheel_separation>
        <wheel_radius>${wheel_radius}</wheel_radius>
        <!-- Match the ros2_control rate -->
        <odom_publish_frequency>50</odom_publish_frequency>

        <max_linear_velocity>${max_rotational_velocity_wheel*wheel_radius}</max_linear_velocity>
        <min_linear_velocity>${-max_rotational_velocity_wheel*wheel_radius}</min_linear_velocity>
        <max_angular_velocity>${max_rotational_velocity_wheel*wheel_radius/(wheel_separation/2)}</max_angular_velocity>
        <min_angular_velocity>${-max_rotational_velocity_wheel*wheel_radius/(wheel_separation/2)}</min_angular_velocity>
      </plugin>
    </gazebo>
  </xacro:if>

  <xacro:if value="${mode == 'gz-sim-velocity-control-plugin'}">
    <gazebo>
      <plugin filename="gz-sim-velocity-control-system" name="gz::sim::systems::VelocityControl" />
      <!-- TODO:MAKE MORE FLEXIBLE -->
      <plugin filename="gz-sim-odometry-publisher-system" name="gz::sim::systems::OdometryPublisher">
        <robot_base_frame>brum/base_link</robot_base_frame>
        <odom_publish_frequency>50</odom_publish_frequency>
        <tf_topic>/model/brum/tf</tf_topic>
      </plugin>
    </gazebo>
  </xacro:if>

  <xacro:if value="${mode == 'gz-sim-ros2-control'}">
    <ros2_control name="GazeboSystem" type="system">
      <hardware>
        <plugin>gz_ros2_control/GazeboSimSystem</plugin>
      </hardware>
      <joint name="left_wheel_joint">
        <command_interface name="velocity">
          <param name="enable_limits">True</param>
          <param name="max">${max_rotational_velocity_wheel}</param>
          <param name="min">${-max_rotational_velocity_wheel}</param>
        </command_interface>
        <state_interface name="position" />
        <state_interface name="velocity" />
      </joint>
      <joint name="right_wheel_joint">
        <command_interface name="velocity">
          <param name="enable_limits">True</param>
          <param name="max">${max_rotational_velocity_wheel}</param>
          <param name="min">${-max_rotational_velocity_wheel}</param>
        </command_interface>
        <state_interface name="position" />
        <state_interface name="velocity" />
      </joint>
    </ros2_control>

    <gazebo>
      <plugin filename="gz_ros2_control-system" name="gz_ros2_control::GazeboSimROS2ControlPlugin">
        <parameters>$(find brum_control)/config/brum_controllers.yaml</parameters>
        <!-- TODO:OPTIONAL <ros><namespace>...</namespace</ros> -->
      </plugin>
    </gazebo>
  </xacro:if>

</robot>